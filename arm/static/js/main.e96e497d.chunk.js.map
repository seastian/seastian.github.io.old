{"version":3,"sources":["Components/Slider.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","height","title","textAlign","id","name","min","max","onChange","classes","Grid","container","spacing","alignItems","className","item","xs","Typography","gutterBottom","Slider","step","valueLabelDisplay","defaultValue","onChangeCommitted","_","value","AppBar","position","Toolbar","variant","margin","padding","sliders","marginTop","useState","data","byId","setById","localStorage","getItem","url","setUrl","handleSliderChanges","useEffect","fetch","Object","values","map","join","NavBar","Paper","sm","TextField","label","fullWidth","target","setItem","Button","color","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","CssBaseline","App","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e96e497d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Slider, makeStyles, Grid } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: \"7em\"\r\n    },\r\n    title: {\r\n        textAlign: \"center\"\r\n    }\r\n}));\r\n\r\nexport default ({ id, name, min, max, onChange }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container spacing={2} alignItems=\"center\" className={classes.root}>\r\n            <Grid item xs={3}>\r\n                <Typography gutterBottom className={classes.title}>{name}</Typography>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <Slider\r\n                    step={1}\r\n                    valueLabelDisplay=\"on\"\r\n                    min={min}\r\n                    max={max}\r\n                    defaultValue={0}\r\n                    onChangeCommitted={(_, value) => onChange(id, value)}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React from \"react\";\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\n\r\nexport default () => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\">\r\n                    Robotic Arm\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles, Paper, Typography, TextField, Grid, Button } from '@material-ui/core';\nimport data from \"./config.json\";\nimport Slider from \"./Components/Slider\";\nimport NavBar from \"./Components/NavBar\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(3),\n    padding: theme.spacing(3)\n  },\n  sliders: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const [byId, setById] = useState(data.byId);\n  const [url, setUrl] = useState(localStorage.getItem(\"url\") || \"\");\n\n  const handleSliderChanges = (id, value) => {\n    setById(byId => ({ ...byId, [id]: { ...byId[id], value } }));\n  };\n\n  useEffect(() => {\n    if (url !== \"\") {\n      fetch(`http://${url}/?${Object.values(byId).map(({ id, value }) => `${id}=${value}`).join(\"&\")}`);\n    }\n  }, [url, byId]);\n\n  return (\n    <>\n      <NavBar />\n      <Paper className={classes.root}>\n        <Typography variant=\"h4\">Dashboard</Typography>\n        <div>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={8}>\n              <TextField label=\"Arm URL\" fullWidth value={url} onChange={({target}) => {setUrl(target.value); localStorage.setItem(\"url\",target.value)}} />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Button variant=\"contained\" color=\"primary\">Connect</Button>\n            </Grid>\n          </Grid>\n        </div>\n        <Grid container className={classes.sliders}>\n          {\n            Object.values(byId).map(({ name, id, min, max }) => <Grid key={id} item xs={12} sm={6}><Slider id={id} name={name} min={min} max={max} onChange={handleSliderChanges} /></Grid>)\n          }\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'fontsource-roboto';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <CssBaseline />\n      <App />\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}